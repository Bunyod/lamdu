{-# LANGUAGE NoImplicitPrelude, TemplateHaskell, OverloadedStrings #-}
module Lamdu.Name
    ( Stored
    , Collision(..), _NoCollision, _Collision
    , visible
    , unnamedText
    , TagText(..), ttText, ttCollision
    , Name(..), _AutoGenerated, _Unnamed, _Stored
    ) where

import qualified Control.Lens as Lens
import           Lamdu.Precedence (HasPrecedence(..))

import           Lamdu.Prelude

type Stored = Text

data Collision
    = NoCollision
    | Collision {-Disambiguator:-} Int
    | UnknownCollision -- we have a collision but unknown suffix (inside hole result)
    deriving (Show)

data TagText = TagText
    { _ttText :: Text
    , _ttCollision :: Collision
    } deriving (Show)

data Name m
    = AutoGenerated Text
    | Unnamed Collision -- a text collision for all the unnameds (TODO)
    | Stored (Text -> m ()) TagText Collision
      -- TODO: Record for the above fields

unnamedText :: Text
unnamedText = "Unnamed"

visible :: Name m -> (TagText, Collision)
visible (Unnamed collision) = (TagText unnamedText NoCollision, collision)
visible (Stored _setName name suffix) = (name, suffix)
visible (AutoGenerated name) = (TagText name NoCollision, NoCollision)

Lens.makeLenses ''TagText
Lens.makePrisms ''Collision
Lens.makePrisms ''Name

instance Show (Name m) where
    show (AutoGenerated text) = unwords ["(AutoName", show text, ")"]
    show (Unnamed collision) = unwords ["(Unnamed", show collision, ")"]
    show (Stored _setName tagText collision) =
        unwords ["(StoredName", show tagText, show collision, ")"]

instance HasPrecedence (Name m) where
    precedence name =
        visible name ^? _1 . ttText . Lens.ix 0 . Lens.to precedence & fromMaybe 12
