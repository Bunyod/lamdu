{-# LANGUAGE NoImplicitPrelude, TemplateHaskell, OverloadedStrings #-}
module Lamdu.Name
    ( Stored, CollisionSuffix
    , Collision(..), _NoCollision, _Collision
    , visible
    , TagText(..), ttText, ttCollision
    , StoredName(..), snSet, snDisplayText, snTagCollision, snStoredText
    , Name(..), _AutoGenerated, _Stored
    ) where

import qualified Control.Lens as Lens
import           Lamdu.Precedence (HasPrecedence(..))

import           Lamdu.Prelude

type Stored = Text

type CollisionSuffix = Int

data Collision
    = NoCollision
    | Collision CollisionSuffix
    | UnknownCollision -- we have a collision but unknown suffix (inside hole result)
    deriving (Show)

data TagText = TagText
    { _ttText :: Text
    , _ttCollision :: Collision
    } deriving (Show)

data StoredName m = StoredName
    { _snSet :: Text -> m ()
    , _snDisplayText :: TagText
    , _snTagCollision :: Collision
    , _snStoredText :: Text
    }

data Name m
    = AutoGenerated Text
    | Stored (StoredName m)
    | Unnamed CollisionSuffix

visible :: Name m -> (TagText, Collision)
visible (Stored (StoredName _set name tagCollision _)) = (name, tagCollision)
visible (AutoGenerated name) = (TagText name NoCollision, NoCollision)
visible (Unnamed suffix) = (TagText "Unnamed" NoCollision, Collision suffix)

Lens.makeLenses ''StoredName
Lens.makeLenses ''TagText
Lens.makePrisms ''Collision
Lens.makePrisms ''Name

instance Show (Name m) where
    show (AutoGenerated text) = unwords ["(AutoName", show text, ")"]
    show (Unnamed suffix) = unwords ["(Unnamed", show suffix, ")"]
    show (Stored (StoredName _set tagText collision _)) =
        unwords ["(StoredName", show tagText, show collision, ")"]

instance HasPrecedence (Name m) where
    precedence name =
        visible name ^? _1 . ttText . Lens.ix 0 . Lens.to precedence & fromMaybe 12
