{-# LANGUAGE NoImplicitPrelude, TemplateHaskell #-}
module Lamdu.Sugar.Names.Types
    ( Source(..), _SourceAutoGenerated, _SourceStored
    , Collision(..), _NoCollision, _Collision
    , Name(..), source, collisionSuffix, setName, text
    , ExpressionN, BodyN, DefinitionN
    ) where

import qualified Control.Lens as Lens
import           Data.Store.Transaction (Transaction)
import           Lamdu.Sugar.Types (Expression, Body, Definition)

import           Lamdu.Prelude

type T = Transaction

data Source = SourceAutoGenerated | SourceStored
    deriving (Show)
data Collision = NoCollision | Collision {-Disambiguator:-} Int
    deriving (Show)
data Name m = Name
    { _source :: Source
    , _collisionSuffix :: Collision
    , _setName :: Text -> T m ()
    , _text :: Text
    }

Lens.makeLenses ''Name
Lens.makePrisms ''Collision
Lens.makePrisms ''Source

instance Show (Name m) where
    show name =
        concat
        [ "(Name "
        , show (name ^. source), " "
        , show (name ^. collisionSuffix), " "
        , show (name ^. text)
        , ")"
        ]

type ExpressionN m a = Expression (Name m) m a
type BodyN m a = Body (Name m) m (ExpressionN m a)
type DefinitionN m a = Definition (Name m) m (Expression (Name m) m a)
