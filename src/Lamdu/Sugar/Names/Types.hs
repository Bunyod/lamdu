{-# LANGUAGE NoImplicitPrelude #-}
module Lamdu.Sugar.Names.Types
    ( NameSource(..), NameCollision(..), Name(..)
    , ExpressionN, BodyN, DefinitionN
    ) where

import Data.Store.Transaction (Transaction)
import Lamdu.Sugar.Types (Expression, Body, Definition)

import Lamdu.Prelude

type T = Transaction

data NameSource = NameSourceAutoGenerated | NameSourceStored
    deriving (Show)
data NameCollision = NoCollision | Collision {-Disambiguator:-} Int
    deriving (Show)
data Name m = Name
    { nNameSource :: NameSource
    , nNameCollisionSuffix :: NameCollision
    , nSetName :: Text -> T m ()
    , nName :: Text
    }
instance Show (Name m) where
    show name =
        concat
        [ "(Name "
        , show (nNameSource name), " "
        , show (nNameCollisionSuffix name), " "
        , show (nName name)
        , ")"
        ]

type ExpressionN m a = Expression (Name m) m a
type BodyN m a = Body (Name m) m (ExpressionN m a)
type DefinitionN m a = Definition (Name m) m (Expression (Name m) m a)
